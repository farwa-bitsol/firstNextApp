generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                    String    @id @default(cuid())
  fullName             String
  email                String    @unique
  password             String
  userImage            Json?
  isVerified           Boolean   @default(false)
  isAdmin              Boolean   @default(false)
  forgotPasswordToken  String?
  forgotPasswordTokenExpiry DateTime?
  verifyToken          String?
  verifyTokenExpiry    DateTime?
  posts                Post[]
  cardDetails          CardDetails[]
  chats                Chat[]
  notifications        Notification[]
  userStories          UserStory[]
  generalForm          GeneralForm?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  profilePhoto String?
  postMedia   Json?
  userName    String
  title       String?
  description String?
  postType    PostType @default(normal)
  likes       Int      @default(0)
  comments    Int      @default(0)
  shares      Int      @default(0)
  postTime    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CardDetails {
  id            String   @id @default(cuid())
  cardNumber    String
  cardHolderName String
  expiryDate    String
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Notification {
  id                    String   @id @default(uuid())
  userId                String
  weeklyNewsletter      Boolean  @default(false)
  accountSummary        Boolean  @default(false)
  websiteNotifications  String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])
}

model UserStory {
  id        String   @id @default(uuid())
  userId    String
  coverImage String?
  story     Story[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model GeneralForm {
  id              String           @id @default(uuid())
  userId          String           @unique
  generalProfile  Json?
  firstName       String?
  lastName        String?
  location        String?
  profession      String?
  bio             String?
  onlinePresence  OnlinePresence[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id])
}

model OnlinePresence {
  id            String      @id @default(uuid())
  url           String
  generalFormId String
  generalForm   GeneralForm @relation(fields: [generalFormId], references: [id])
}

model MediaFile {
  id          String   @id @default(uuid())
  data        String
  name        String
  contentType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Story {
  id          String     @id @default(uuid())
  text        String?
  image       String?
  userStoryId String
  userStory   UserStory  @relation(fields: [userStoryId], references: [id])
}

model Chat {
  id          String    @id @default(uuid())
  userId      String
  name        String
  lastMessage String
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  sender    String
  text      String
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PostType {
  event
  article
  normal
}
